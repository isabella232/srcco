package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _data_publish_gh_pages_sh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x57\x6d\x53\xdb\x48\x12\xfe\xae\x5f\xd1\x31\x54\x80\xc4\xb2\x43\x3e\x5e\xd6\xc9\x29\x46\x80\xea\x8c\x4d\xc9\x66\xb9\xd4\xb2\x17\xcb\xd2\x08\xe9\x22\x6b\xb4\x9a\x91\xc1\xb7\xc9\x7f\xbf\xa7\x67\x64\x63\x73\xd4\x6d\x28\xca\xb6\x66\xfa\xfd\xe5\xe9\xd6\xc1\xab\x7e\xa3\xea\xfe\x22\x2f\xfb\xa2\x5c\xd1\x22\x52\x99\xe3\x1c\xd0\x50\x56\xeb\x3a\xbf\xcf\x34\x1d\xc7\x27\xf4\xfe\xdd\xe9\x29\x05\x51\x49\x57\x51\x3c\x12\x32\xa1\x5f\xf2\xa8\xfc\x7b\x29\x56\x79\xdd\x2b\x85\xfe\xe8\x1c\x80\xe5\x5a\xd4\xcb\x5c\xa9\x5c\x96\x94\x2b\xca\x44\x2d\x16\x6b\xba\xaf\xa3\x52\x8b\xa4\x4b\x69\x2d\x04\xc9\x94\xe2\x2c\xaa\xef\x45\x97\xb4\xa4\xa8\x5c\x53\x25\x6a\x05\x06\xb9\xd0\x51\x5e\xe6\xe5\x3d\x45\x14\x43\x35\x53\xea\x0c\x62\x94\x4c\xf5\x43\x54\x0b\x10\x27\xd0\x11\x29\x25\xe3\x3c\x82\x44\x4a\x64\xdc\x2c\x45\xa9\x23\xcd\x1a\xd3\xbc\x10\x8a\x8e\x75\x26\xa8\x33\x6d\x79\x3a\x27\x46\x4d\x22\xa2\x82\xf2\x92\xf8\x6e\x73\x45\x0f\xb9\xce\x64\xa3\xa9\x16\x4a\xd7\x79\xcc\x32\xba\x90\x9f\x97\x71\xd1\x24\x6c\xc7\x86\xa0\xc8\x97\x79\xab\x83\x05\x98\x98\x28\x16\xdb\x28\x78\xc1\xb6\x76\x69\x29\x93\x3c\xe5\x6f\x61\x5c\xab\x9a\x45\x91\xab\xac\x4b\x49\xce\xc2\x17\x8d\x16\x2c\x5b\xf1\x71\x2c\x4a\xe6\x83\x37\x7d\x59\x93\x12\x45\xc1\x32\x72\xd8\x6e\x3c\x7e\xb2\xd0\xd0\xb0\x9e\x8a\xc3\xaa\xdb\x40\x19\xcd\x0f\x99\x5c\xee\x7b\x93\x2b\xc8\x4f\x9b\xba\x84\x5a\x61\xb8\x12\x89\xd0\x75\x59\xe7\xbf\x45\xac\xf9\x84\x19\x52\x59\x14\xf2\x81\xdd\x8b\x65\x99\xe4\xec\x95\xfa\x9b\x49\xde\x0c\xb7\xd1\x42\xae\x84\x71\xc9\x66\xbe\x94\x1a\xf6\x5a\x3b\x38\x17\xd5\x53\x82\xdb\x2b\x95\x45\x70\x60\x21\xda\xb8\x41\x35\xe2\x1c\xed\xf8\x54\x5b\xbf\x95\x46\x15\xe4\x48\x43\x25\x6b\xa3\xf4\xb9\xb7\x3d\x6b\xc4\xa5\x4f\xd3\xc9\xf9\xec\xd6\x0b\x7d\x0a\xa6\x74\x1d\x4e\x7e\x0d\xce\xfc\x33\xea\x78\x53\x3c\x77\xba\x74\x1b\xcc\x2e\x27\x37\x33\x02\x45\xe8\x8d\x67\x5f\x68\x72\x4e\xde\xf8\x0b\xfd\x23\x18\x9f\x75\xc9\xff\xe7\x75\xe8\x4f\xa7\x34\x09\x29\xb8\xba\x1e\x05\x3e\xce\x82\xf1\x70\x74\x73\x16\x8c\x2f\xe8\xf3\xcd\x0c\x3a\xc6\x93\x19\x8d\x82\xab\x60\x06\xb1\xb3\x89\x51\xd9\x0a\x0b\xfc\x29\x8b\xbb\xf2\xc3\xe1\x25\x1e\xbd\xcf\xc1\x28\x98\x7d\xe9\xd2\x79\x30\x1b\xb3\xd4\x73\x88\xf5\xe8\xda\x0b\x67\xc1\xf0\x66\xe4\x85\x74\x7d\x13\x5e\x4f\xa6\x3e\x0c\x38\x33\x82\xc7\xc1\xf8\x3c\x84\x26\xff\xca\x1f\xcf\x7a\xd0\x8c\x33\xf2\x7f\xc5\x03\x4d\x2f\xbd\xd1\xc8\x28\xf3\x6e\xe0\x41\x68\x6c\x1c\x4e\xae\xbf\x84\xc1\xc5\xe5\x8c\x2e\x27\xa3\x33\x1f\x87\x9f\x7d\xd8\xe6\x7d\x1e\xf9\x56\x19\x1c\x1b\x8e\xbc\xe0\x8a\xab\xe7\xcc\xbb\xf2\x2e\x7c\xc3\x37\x81\x9c\xd0\x10\xb6\x16\xde\x5e\xfa\xe6\x08\x1a\x3d\xfc\x0f\x67\xc1\x64\xcc\xae\x0c\x27\xe3\x59\x88\xc7\x2e\x3c\x0d\x67\x5b\xd6\xdb\x60\xea\x77\xc9\x0b\x83\x29\x87\xe5\x3c\x9c\x5c\x75\x69\x62\x82\x03\x9e\x89\x11\x03\xce\xb1\x6f\xe5\x70\xc8\xf7\x33\x03\x12\x7e\xbe\x99\xfa\x4f\xd6\x9c\xf9\xde\x08\xd2\xa6\xcc\xbc\x4b\xdc\x63\x30\x19\xc9\x15\x6a\xae\x58\x93\x8e\xbe\x09\xf4\x6a\x8d\xfa\xbd\x47\x7f\x35\x8b\x5e\x2c\x97\x7d\x83\x23\xfd\xfb\x5a\xc6\xa0\x56\x42\x93\x2b\xe8\x80\xa6\x5a\x56\xd4\x76\x5d\x9a\xd7\x4a\x53\x1a\xe5\x45\x83\x6a\xd7\x59\xa4\x49\xc6\x71\x53\x2b\xc7\x39\x9b\x0c\xa7\x5f\xaf\xbd\xd9\xe5\xa0\x07\x91\x46\x8a\xab\x97\x95\x33\xf3\xc2\x0b\x7f\xf6\xf5\x33\x32\x3b\xbc\x1c\xdc\x67\x6e\x15\xdd\x0b\xe5\xfc\xf6\x1b\x1d\x9e\xd2\xef\xbf\xd3\xeb\xd7\xd4\x92\x84\xfe\xd5\x64\xe6\x0f\x70\xfc\xfd\xfb\xb3\x33\x89\x46\xc8\x4b\x76\xe1\x02\x2d\xa8\xaa\x1c\xad\xcf\xa0\x80\x7a\xd6\x8d\x42\xb1\xa7\xb2\x5e\x5a\x70\xc0\xff\xa1\xd2\x89\xa8\x6b\xdb\xb9\x0f\x02\x3d\x58\x1e\x69\x7a\x40\xe9\x73\xff\xd5\xa2\x88\xd6\xd6\xf6\x48\x81\x84\x40\x0a\x08\xb0\x9d\x09\x0d\xc0\x93\xba\x47\xe8\x08\x66\x7d\xa8\xa3\x8a\x43\x64\x44\xa1\x97\x2d\x6d\x86\xa7\x82\xbb\x57\xc2\x75\x51\xac\x84\xea\xf5\x7a\x8e\x78\x14\xf1\x57\xd0\x1e\x9f\xd0\x9f\x0e\x11\xe0\x55\x0d\x8e\x8e\xf0\x0b\xc6\xd1\xf1\x31\xe5\x34\xa0\xd3\x0f\xf8\xfa\x65\x40\x87\x07\xf8\xf1\xf6\x2d\x9d\x9c\x7c\x80\x58\xd0\x10\x89\x15\xfa\x12\x4c\x83\xbb\xc3\xc3\xdc\x9c\xe4\x29\x71\x98\x70\x46\x83\x01\xbd\xb9\xa3\x37\x08\xd8\x07\x36\xb3\x34\xf7\x84\xec\xfc\xa0\x5b\xc1\x68\x0c\x08\xb6\x3e\x25\x12\xf0\x26\xe8\x8f\x46\x6a\x34\xfe\x43\x0e\x10\x00\x48\x30\x36\xc0\xb1\x84\x5d\xae\xa2\x5a\x73\xdf\x43\xae\x01\x6e\x82\xe2\x06\x2e\xb4\x32\x8d\xdd\x1d\xd6\xaa\xe8\xce\x7c\xdf\x75\x3a\xd6\xc2\x42\x89\x17\x88\xf8\xd3\x12\xa4\x6c\x37\xa2\x2d\x1c\x7c\x73\x01\xbd\x65\x7a\x36\xd2\x5f\x09\xae\x20\xd9\xdc\x67\xdb\xb0\x72\x41\x6d\x6c\xe0\x1c\xb6\x36\x77\xcd\xec\xe3\xd1\xa5\xaa\x22\xd7\xda\xc4\xb9\x04\xd8\xe6\xb8\xac\xa2\xd8\xce\x8c\xbc\x44\x8e\x6e\xb3\xf5\x27\x28\xc0\xec\x68\x0a\x3d\x98\x9b\x08\x72\xb2\xac\x5d\xef\x3f\xbe\x3e\x9d\xb3\x21\xa6\x48\x06\x87\x9f\x5a\xa3\x5c\x63\x5e\x1b\xdc\xb6\x82\xdc\x52\xd0\xbb\xfd\xe8\x8a\x38\x93\xd4\x39\xb4\xc2\x3b\xf4\xf1\xf5\x7b\x7b\xfc\xc8\x0a\x2c\x9b\x63\x5c\x76\x9e\xd3\x1a\x93\x34\xa6\x00\xbd\x73\x7e\x38\x8e\xd5\x34\x67\xc3\x36\xda\xd4\x9c\x5e\x0d\xa8\xd3\xd9\xd5\x68\x65\x5c\x17\x22\x52\x0c\xfe\x4b\x1e\x36\x3c\x9a\x34\x47\x63\x8d\x4a\xe3\x91\x5d\xa2\x77\x90\x4b\x54\x94\xd8\x8c\x37\x8e\xcf\xfe\x0c\x46\x29\xdb\xae\x7e\xb5\x31\xdb\x18\x7d\xea\xb0\xb1\xc3\x9b\x30\x04\x12\x6e\x1a\xd2\x98\xb5\xc0\x72\x10\x67\x08\x58\x3f\x11\xab\x7e\xd9\x14\xc5\x77\xe2\x62\x71\x4b\x3a\xea\xff\xeb\xee\x4d\x5f\xf1\x27\xf5\xfb\xd5\xd1\x7c\x2b\x60\x38\xb9\x02\x7a\x5b\x01\xb5\x58\xa1\xaf\xd1\x0b\x74\xe9\x7b\x67\x73\xc7\xb4\xf7\xfb\xb6\xbd\x2d\xe1\xd7\x2b\x60\x37\x90\x73\x80\x73\xf4\xf7\xb3\xc3\xce\x85\x28\x45\xfd\xd2\x3e\x81\x10\x1c\xee\xab\xec\x30\x0e\x5c\x23\xd6\xa2\x5e\x09\x53\x45\x55\x2d\x79\xba\x1e\x29\x62\xec\xc9\xef\x4b\x0e\x8f\x92\xb6\x21\xb6\x00\x10\x67\x22\xfe\xc6\x75\x06\x91\x12\x6c\xf5\x43\x0e\x83\x55\x5c\x8b\x07\x6a\x2a\xca\xf2\x24\x11\xed\x02\xd3\xe6\x0c\xf8\xb7\x23\x70\x27\x57\x71\xb5\x7b\x71\xb8\xc5\xbe\xbe\x09\xf1\x4e\xc2\xdb\xc8\xba\x6e\x29\xdd\x58\x16\xd0\xfc\x1d\xab\x98\xa8\xa8\x43\x87\x7b\xc8\xd8\x99\x73\x8f\xef\x57\x04\x86\x0d\x96\x33\x4a\x85\x86\x08\x03\xd6\xec\xac\xe6\xbd\x8d\x43\xbe\x44\xb7\x70\xae\x15\x16\x3a\xa8\xcc\x19\xe2\x14\xc1\x1d\x13\x46\x7b\x5f\xac\x4d\xf6\x2d\x30\xb5\x92\x0e\xf7\xb0\xd5\x69\x15\xa1\xae\x40\x81\x42\x51\x7a\xcb\xfb\x69\xdb\x27\x7b\xce\x44\x2f\xfa\x63\x99\x54\x7f\x5f\x7c\xff\xaf\xdd\xdc\x94\xfe\x58\xd2\xd1\x3e\xf5\xd1\x46\xa5\x31\x4b\xa1\xe3\x87\xec\x9d\x45\x04\xd1\x82\xd2\xc6\x39\xb5\x5e\x2e\x24\x16\x3b\xb7\x16\xa9\x29\x43\x58\x94\xaa\x7e\x26\xa2\x44\x3d\xb3\xc2\x30\xd6\x4b\x93\xc3\x7e\x5e\x26\xe2\xd1\x71\x2c\x9c\x6e\xcb\xca\xa6\x36\xb1\xe5\x00\x48\xc2\xb0\x59\x62\x68\x62\x89\x32\x83\x4f\xac\x8f\x78\x17\x8e\x75\x83\x2d\x6b\xbd\xa1\x7e\xb5\x03\xdb\xee\x5e\x5d\xbc\x5c\x46\xfc\x87\x52\x7a\x99\xee\xe9\x67\x4b\xb9\xf5\x34\x4a\x92\xe7\xb7\x16\x86\x76\x68\x62\xe0\x48\x49\x6e\x9a\xfc\xe1\xec\x00\xf7\x8b\x53\x75\x2f\x03\x85\x8c\x01\xa2\x6d\xd8\x9f\xa7\xa3\x6b\x7b\xc8\x4e\x3e\xfd\x74\xfd\x62\xaa\x8f\xec\xc2\x5a\x47\x96\x81\x7b\xf1\x59\xc6\x8c\x30\x16\xe4\x2e\x9e\x75\x03\xfd\x5f\xc9\x2d\xec\xb6\x5e\xfd\xaf\xb8\x67\xd4\x4c\x7b\xc0\x63\x72\xb3\x01\x7c\x13\x28\x58\xe0\x00\x40\xb6\x2a\x04\x9a\x48\xad\xcb\x98\x8e\x13\x81\x07\xe3\x5b\x61\x50\x08\x69\x47\x7d\xc7\x75\x93\x6a\xdb\x7d\x15\x60\x2e\x97\xc0\xef\x7d\x88\x82\xca\xaa\xd1\x27\xdb\xf9\x4f\x85\x72\xed\x6b\xd0\x77\x7a\x34\x93\xa8\x5e\x3a\xed\x6a\xbf\x15\xa1\x64\xd1\x18\xee\x85\xc0\x9b\x80\x59\xa9\xcc\x3b\x85\x79\xe9\xea\x25\x52\xbb\x6d\xe5\x31\x50\x59\xbc\x07\x90\x81\xa5\xc8\xff\xc3\x5b\xca\x3c\x45\xdd\xce\xbb\x3c\x16\x91\x28\x7e\xab\xe2\x79\x13\x15\x40\xbd\x65\x94\x58\x58\x9c\xe7\xe9\xdc\xe5\x91\x23\xcc\x98\x97\x0b\x28\x85\xbb\x76\xc7\xff\xb8\xa9\x3e\x37\x4c\x77\x2b\xf0\x0d\xf5\xb6\xb7\x3f\x5b\xc9\x1b\xfa\x9f\xab\xe6\x0d\x35\xf2\x72\x80\x2f\x7c\x78\x85\x16\x75\x89\x68\xae\xc4\x53\x60\x1a\xc5\xb9\x98\x03\xee\xe6\x3b\x06\x1f\x53\x9c\xec\xa8\xa0\x0f\x8c\x87\xc0\x23\xf1\x18\xe3\xbd\xc7\xa8\xa1\x38\x25\x97\x7a\x74\x82\xf8\xf3\xe5\xe3\xb7\x6a\xb5\xc2\x11\xa4\x70\xd0\x76\xb9\xdd\x65\xf4\x98\x88\x4a\x67\x74\x8a\x61\x87\x35\x09\x53\x0c\x0f\xbb\x14\x5c\xc4\x2f\x5e\x19\xef\x10\x1c\x64\x7d\x13\xc6\xce\x9f\x3f\x3a\x50\x7c\xf7\x81\xd3\x0d\xec\x06\x9b\x19\xcf\x4d\x89\x54\x2a\x4e\xe0\x16\x31\xb2\x88\x5f\xf1\xec\x40\xff\xe9\x0d\x61\x17\x00\x5c\x6f\xaf\xf6\xed\xbe\xe0\x2e\x31\x2c\xf7\x26\xeb\x2e\x51\xd5\xa8\xe7\xe8\xff\x72\xaf\x0c\x0d\x78\x60\x26\x46\x29\x12\xf3\xb4\xe5\x3a\xc0\x4c\xb7\xde\x2d\x17\xc7\x79\xa1\xfd\xf6\x57\x0c\xe7\xbf\x01\x00\x00\xff\xff\xef\x96\x84\x97\xda\x10\x00\x00")

func data_publish_gh_pages_sh_bytes() ([]byte, error) {
	return bindata_read(
		_data_publish_gh_pages_sh,
		"data/publish-gh-pages.sh",
	)
}

func data_publish_gh_pages_sh() (*asset, error) {
	bytes, err := data_publish_gh_pages_sh_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/publish-gh-pages.sh", size: 4314, mode: os.FileMode(420), modTime: time.Unix(1424843040, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_srcco_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x4b\x6f\xe3\x36\x10\xbe\xe7\x57\x10\x29\x16\xd8\x2c\x24\x2f\xfd\xcc\xc6\xbe\x74\x9b\x6e\xd1\x43\xb7\xe8\xa5\xbd\x53\xe2\xd8\x62\x4d\x93\x02\x49\xd9\xd6\x06\xf9\xef\x1d\x52\x94\x2c\x3f\x14\x34\x76\x1c\x50\xe4\x7c\xf3\xfc\x66\xa8\xc2\xed\x24\x79\xb9\x23\xf8\x29\x40\x6c\x0a\xb7\x24\xac\x72\x7a\x15\x76\x76\x42\xa5\xed\xee\x98\xd2\x0f\xab\xbb\xd7\xbb\x4c\xf3\x3a\x02\x3e\x7f\x22\x6b\xad\x5c\xba\x66\x3b\x21\xeb\x25\xb9\xff\x1d\xe4\x1e\x9c\xc8\x19\xf9\x13\x2a\xb8\x4f\xba\xe7\xe4\xab\x11\x4c\x26\x96\x29\x9b\x5a\x30\x62\xbd\x22\x9f\x3e\x07\x1d\xff\x53\x41\xe3\x4f\xc6\xf2\xed\xc6\xe8\x4a\xf1\x34\xd7\x52\x9b\x25\x31\x9b\xec\xe3\x13\x4d\x48\xf3\x7b\xf0\x0e\x8e\x36\x46\xf0\x8b\x90\x1a\xe7\x43\x48\xcc\x6c\x84\x5a\x12\x5a\x1e\x7b\x81\x96\x8c\x73\xa1\x36\xcd\xf6\x78\x5e\x1e\x87\xec\xfd\xf4\xdb\xc4\x7f\xdf\x44\x1d\x04\x77\xc5\x92\x2c\x28\xf5\x3b\xe8\x90\xd1\x87\xe8\x8f\xde\x83\x59\x4b\x7d\x58\x92\x42\x70\x0e\xea\x42\xcf\xf8\xa4\x08\x61\x5c\xe7\x11\x16\x92\x64\xc5\x0f\x40\x91\xc7\xd6\xcc\xbb\x22\x69\xdd\x9f\xcd\x66\x67\x4e\x36\x40\x34\x96\x6b\x0e\x7d\x6b\x6d\x49\xbe\x83\x92\x3a\xf9\xae\x15\xcb\x75\xf2\xac\x95\xd5\x92\xd9\xe4\xfe\x59\x57\x46\x80\xc1\x32\x1d\xee\x93\x9d\x56\xda\x96\x2c\x87\xd5\x95\xb7\x93\x2e\x29\x85\x70\x90\x06\xa9\x25\x29\x0d\xa4\x07\xc3\xca\xd5\x1b\x49\xb9\x1d\x5e\xa6\x8f\xa9\x2d\x18\xf7\xd2\xfe\x24\x44\xe9\xff\x21\x11\xd8\x47\x24\x41\xfc\x1b\x8d\x1f\x88\x50\x16\x5c\x0b\x33\x1c\x4c\x6a\x18\x17\x95\x6d\xf2\x3c\x58\xe1\xe9\xe3\xf4\x69\xfa\x78\x23\x4b\x57\xa5\xea\x12\xb7\x2c\x7c\x0c\x84\xc5\x04\xa6\x07\xc8\xb6\xc2\xa5\x4c\x89\x1d\x73\x42\x63\x14\x35\x48\x8c\x10\xb3\x8a\x59\xa6\xa3\x85\x25\xc0\x2c\xa4\xd8\x5e\xba\x72\x64\xdc\xe8\x4e\x77\xfa\xc7\x7b\x31\xef\x10\x6f\x8b\xcc\x4e\xdd\x7b\x8a\x06\x33\xe8\x4b\xd5\x76\x25\x9e\xb5\xf9\x4f\xfd\x59\xda\x1e\xf6\xc9\x24\x54\x81\xad\x1c\x33\xec\xe0\xe8\x52\x0e\xb9\x36\xd1\x1d\xa5\x15\xdc\x4c\xfe\xb4\xcb\x7d\xd8\x5f\x12\xa4\x14\x36\xac\x37\xe3\x0c\x0e\x88\x92\x19\x50\xee\xb2\x3c\x4b\x22\x85\x02\x66\xd2\x8d\xd7\x83\x02\x1f\x9d\x46\x0d\xce\xe9\x5d\xd2\x16\x3f\x7c\x47\x14\x4b\x4f\x3f\x24\xe7\x7b\xf3\x87\x30\x03\x1e\x7a\x69\x88\x45\x7b\x79\xb7\xa1\xc9\x7c\x9e\xf8\x9f\x57\x3c\x9d\x9f\x8c\xf5\xf7\xe7\x7d\x83\x77\x98\xce\xb4\xfb\x10\xc5\xf6\xbd\xc7\xdb\x1f\x4c\xf5\xc8\xe9\xdc\x9e\x6a\xc5\x85\x65\x99\x04\xec\x2e\x83\xb9\x3d\xb4\x95\xc2\xed\x52\xb2\xfa\x3a\xdf\xfd\xbc\x66\x12\xc3\x3b\x2b\x86\xd3\x65\x1f\x52\x6a\x2b\x9a\xb2\xad\xc5\x11\xf8\x75\xf2\x1b\x72\x5d\x77\xe6\x69\xc2\x04\x8d\xb4\x59\x9b\x66\xea\xd2\xb3\x26\x1a\xd3\xae\xeb\xda\xb1\x3c\x69\x9b\xc8\x87\x3a\x62\xb9\x13\xfb\x76\x08\x45\xd0\x94\xf6\x45\xc8\xb9\x4c\x17\x7b\x26\xb5\x8f\xaf\x91\x4a\x15\xdb\xc1\x8d\xb2\x62\x3d\xeb\x38\xa0\xa4\x66\x68\x5d\xc2\xda\x5d\x47\x44\x2f\xc6\xf8\xbc\xdb\x08\x14\x67\x52\x6c\x50\x32\x47\x62\x80\x19\x8e\x26\x38\x71\x33\xa2\xf1\xbc\x27\x16\x8f\x4e\xe9\x67\x19\x56\xad\x72\x70\x3e\x19\x53\x8c\xd1\xe6\x46\x4b\xb9\xba\xbc\xd6\x2e\xbc\x9d\x9e\x76\x42\x41\x26\xdd\xe3\x05\x51\xd0\xbe\xc2\x36\x48\x7b\xd7\xf9\xb5\x84\xf7\x50\x8a\x78\x2c\x85\xc5\xb1\xee\x6a\x09\xa9\xab\x4b\xe8\xd3\xa7\xcb\xdf\x05\xdb\x89\xad\x95\x63\x47\x9c\xeb\x9b\x42\x7a\x97\x71\xd8\xdc\xa2\x3e\x72\x19\x41\x7f\x19\x70\xae\xc6\xcb\x41\xa8\x20\x18\x6c\xd9\x11\xf9\xdb\x02\xc7\xf8\x5c\xe1\xef\x0d\xe7\xc4\xba\x1e\xfd\x8b\xdb\x0d\xe8\x1f\xb1\x23\xb6\x52\x59\x65\xac\x23\xae\x00\x2c\x7d\x56\x93\x5f\xd9\x1e\xa9\xff\x07\x88\x4c\xef\x45\x1e\x06\xd7\xc8\x3a\x93\x90\xd0\xfa\x7e\x49\x5e\xba\x3b\x71\x31\xff\x85\xce\x26\x2b\xf2\xea\xdb\x0c\x8f\xbc\x6d\x92\x22\x5f\x00\x94\x87\x8e\xb6\x07\xde\x22\x71\xd9\x43\x7e\x9b\x7c\x79\x5a\xcc\x22\x72\x0b\xf5\x01\x9b\x0b\x91\x9c\x99\x2d\x29\x85\xda\x06\x74\xee\x07\x47\x83\xc6\x65\x0f\xfd\xf5\x9b\xff\xae\xe2\x7d\xe9\x83\xc5\x99\xea\x90\x60\x79\xd4\x88\xe2\x3b\xe4\x59\xf0\x85\xd5\x41\x19\x66\xbe\x55\x86\xcb\x9e\xb2\x2f\x4f\x19\x5f\xaf\x23\xd0\xd7\x07\x51\x21\xe5\xd8\x1c\x15\x04\xac\x14\xae\xc5\xe2\xb2\x87\x9d\x4e\xbf\x3c\x3e\x3f\x47\x2c\x1e\x81\x61\x12\xe1\x1d\xb0\xac\x54\x0b\xc4\x65\x0f\xb8\xee\x2c\xe2\x7e\xee\xaa\x30\xfa\x11\x19\x2e\xfb\x06\x2a\x4f\x50\x39\x00\x95\x0c\x0b\x8e\xbd\x75\x06\x74\x6c\xd3\x05\xca\x36\x43\x81\xfa\xb7\xd7\xcf\x47\x7c\x83\xf5\x32\xfe\x0a\xbd\x8c\x99\xb9\xce\x3e\x2e\x7b\x6a\x32\x9e\x3d\x2e\xb2\x4b\x35\xcc\x61\xf9\x33\xec\x3f\x12\x86\x08\xea\xdb\x16\x6c\x2b\xa2\xaa\xfd\x49\xd5\x7e\x88\x3f\x37\x54\xed\x99\xf7\xa6\x4f\x28\xbc\x27\x5b\x55\xb8\x1c\xaa\x04\x1e\xe1\xe5\xde\xaf\xc4\xcf\x3b\xe0\x82\x35\x1d\x12\xba\x72\x98\xd4\x74\x41\x51\x8d\x17\x19\x64\x2f\xa5\x8b\x48\xbe\x43\x9c\x27\x99\x96\x3c\xa2\x06\x59\x8b\xaf\xb5\x03\x94\xf5\xb0\x41\x7e\xce\xe8\x6c\xd8\xd8\x20\x33\xe9\x6c\x16\x45\x06\x39\x38\x9b\xb5\x81\x0e\x72\x8d\xd2\x56\x64\x90\x55\x6f\xe6\x62\x90\x44\x21\xa8\x28\x32\x40\x8e\x58\x87\xd7\xbb\xff\x02\x00\x00\xff\xff\xf9\xf4\x15\x06\x69\x0d\x00\x00")

func data_srcco_css_bytes() ([]byte, error) {
	return bindata_read(
		_data_srcco_css,
		"data/srcco.css",
	)
}

func data_srcco_css() (*asset, error) {
	bytes, err := data_srcco_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/srcco.css", size: 3433, mode: os.FileMode(420), modTime: time.Unix(1424841834, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_srcco_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x4d\x8f\xd3\x30\x10\xbd\xf7\x57\x18\x73\xa8\xab\x52\x8b\x7b\xe1\x80\x10\x37\x04\x07\xb8\x21\x0e\x5e\x7b\x9a\xb5\x70\x3d\xe0\xb8\x59\x55\xa8\xff\x9d\x99\xa4\x9b\x75\xb2\xcd\x36\x95\xf0\xa1\x1f\x9e\x99\xe7\xf7\xde\x8c\xfd\xe0\xa3\xc3\x07\x8d\x31\xa0\x71\xe2\xbd\xd8\x1d\xa2\xcd\x1e\xa3\x50\x2b\xf1\x77\x21\x68\x35\x26\x89\x68\xf6\x50\x53\xd4\xa1\x3d\xec\x21\x66\xfd\xe7\x00\xe9\xf8\x0d\x02\xd8\x8c\xe9\x43\x08\x4a\xea\x8c\x76\xc3\x79\x72\xb5\x6d\xeb\x76\x98\x84\xe2\x62\x4f\x85\x6f\xb7\xf4\xf5\xae\xc3\xd1\x01\x62\x95\xef\x69\x67\xbd\x7e\x3c\x84\x57\x17\xf4\x19\xf6\xca\xaf\xb4\x71\xee\x53\x43\x47\x7d\xf6\x75\x86\x08\x49\x49\x1b\xbc\xfd\x25\xdf\xf4\x14\x15\x34\x65\x39\xaf\x9c\x7c\x55\x41\xfa\xfe\xf5\x23\x05\x75\x36\xa9\x82\xac\xbd\x3b\x33\xe2\x75\x3a\xff\x3e\xf5\xda\xb2\xcf\xe1\xaa\xb8\x88\x0e\x36\x6d\xe6\x4b\xf2\x3a\xa8\x29\x7d\xe7\xe8\xff\x10\xf8\x85\xe8\x14\x0a\x7f\x9b\x44\x40\xbc\x79\x51\xe9\x69\xbb\x58\xf4\x7d\x2d\x2c\x22\x63\x8a\x1e\x27\xc4\x3c\xe9\x82\x92\xaf\xa5\x58\x0b\xef\xe8\x43\x6e\xa8\xd5\x8f\x36\xf8\x9d\x50\xaf\xb8\x54\xdb\x60\xea\x9a\xc5\x68\x8b\x31\x1b\x1f\x6b\x25\x0d\x9d\xd9\x90\x65\xa5\x8c\x51\x32\xd9\xf0\x94\xb7\x1d\x66\x3d\xe9\xba\xbd\x60\x44\xbf\x18\xcf\x99\x58\x63\x80\x76\x04\xee\xd0\x1d\xaf\x21\x9c\x04\x84\x1a\xa6\x15\x27\xd8\x63\x03\xb7\x89\x9e\x5f\x33\x4b\xf7\x34\x9c\x83\x76\xcf\x64\xe0\xc1\x9f\x34\x82\x5a\xda\x4f\x57\x31\x5c\xc3\x6a\x4e\x1c\xbc\x22\xf4\x9f\x2f\x5a\x7c\xc6\xb3\xb8\x64\x9d\xc3\x2f\x3c\x21\x0c\x32\xf9\x84\x70\xf0\x87\xff\x79\x55\xea\x90\x76\x79\xab\xc6\xa4\x99\xcf\x45\xce\x97\x08\xb7\xb7\x81\x37\x66\xdf\x06\x8a\xd6\x18\x40\x07\xac\xd4\xf2\xde\x2f\x8b\x56\x8c\x70\xe6\x4c\xda\x00\xed\xee\x08\xcb\xc9\xce\xb6\xe0\xcf\xde\x0d\xb6\xe5\x5f\x00\x00\x00\xff\xff\x18\xfb\x08\xc5\x12\x06\x00\x00")

func data_srcco_js_bytes() ([]byte, error) {
	return bindata_read(
		_data_srcco_js,
		"data/srcco.js",
	)
}

func data_srcco_js() (*asset, error) {
	bytes, err := data_srcco_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/srcco.js", size: 1554, mode: os.FileMode(420), modTime: time.Unix(1424833139, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_view_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xc1\x4e\xf3\x30\x0c\xc7\xef\xdf\x53\xf8\xcb\x81\xdb\xda\x07\x20\xdd\x65\x03\x71\x00\x0d\x69\xbd\x70\xec\x12\x77\x0d\x64\xc9\x94\x64\xa0\xa9\xea\xbb\xe3\x34\x5d\x15\x04\x1a\x9c\xea\xfa\xef\xff\xcf\x8e\x65\xfe\x7f\xbd\x59\xd5\x2f\xcf\x77\xd0\x85\x83\x5e\xfe\xe3\xe9\x03\xc0\x3b\x6c\x64\x0c\x28\x0c\x2a\x68\x5c\xf6\x7d\x51\xc7\x60\x18\x78\x99\x32\x49\xd5\xca\xbc\x81\x43\x5d\x31\x1f\xce\x1a\x7d\x87\x18\x18\x74\x0e\xdb\x8a\x95\xde\x09\x61\x0b\xe1\x3d\x9b\xaa\xbd\x70\xea\x18\x80\xf2\xb3\xfa\x4a\x22\x2f\x93\x30\xb6\x2e\x2f\xbd\xf9\xce\xca\xf3\x64\x94\xea\x1d\x84\x6e\xbc\xaf\x58\xb0\xe2\xc2\x9b\x04\x25\x2b\xd6\x2a\x6a\xce\xb2\x9a\x85\x69\x0e\x38\xd7\x01\x8c\x05\x17\x57\x49\xb6\x6f\x08\x89\xed\x55\x42\xd4\xaf\x02\xc6\x16\x0b\x72\xe6\x94\x0c\x40\x3b\xbc\xa7\x92\xba\xd9\x69\xdc\xb4\x2b\x6b\x02\x9a\xe0\x87\xe1\xd7\xa9\xae\x33\xb7\xc1\x9d\x44\x38\x39\x94\x7f\x20\xe7\x61\xb6\xd4\xbd\x53\x72\xa6\xf6\x3d\xb8\xc6\xec\x11\x8a\x2d\xee\x0f\x5f\x49\x99\xc7\xd9\x8f\x6c\x90\x5c\x91\x71\xc4\xbe\x57\x2d\x14\x6b\x2b\x1e\xea\xa7\xc7\x61\xa0\x41\xb3\x18\xb5\xa7\x53\xba\x31\x3b\x7f\xbc\xa5\x3f\x23\xe3\x5d\x65\xcf\x8f\x43\x44\xfb\xca\x4a\x4c\x9e\x9c\x2f\x28\x1b\x1b\xe4\xf2\xe8\x9e\x50\x3f\x2d\x94\x1e\x45\x1a\x4c\xe2\x2c\xf1\x32\x5d\x19\x9d\xdd\x78\xfb\x9f\x01\x00\x00\xff\xff\x1e\x6d\x35\x31\x13\x03\x00\x00")

func data_view_html_bytes() ([]byte, error) {
	return bindata_read(
		_data_view_html,
		"data/view.html",
	)
}

func data_view_html() (*asset, error) {
	bytes, err := data_view_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/view.html", size: 787, mode: os.FileMode(420), modTime: time.Unix(1424836679, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/publish-gh-pages.sh": data_publish_gh_pages_sh,
	"data/srcco.css": data_srcco_css,
	"data/srcco.js": data_srcco_js,
	"data/view.html": data_view_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"data": &_bintree_t{nil, map[string]*_bintree_t{
		"publish-gh-pages.sh": &_bintree_t{data_publish_gh_pages_sh, map[string]*_bintree_t{
		}},
		"srcco.css": &_bintree_t{data_srcco_css, map[string]*_bintree_t{
		}},
		"srcco.js": &_bintree_t{data_srcco_js, map[string]*_bintree_t{
		}},
		"view.html": &_bintree_t{data_view_html, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

